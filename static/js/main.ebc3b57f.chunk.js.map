{"version":3,"sources":["Containers/Navbar/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","Navbar","bg","variant","fixed","Brand","Collapse","className","Text","feedback","score","highScore","Card","Image","alt","name","src","image","onClick","handleClick","id","thumbnail","App","state","picks","cards","pointCheck","includes","setState","cardDeck","this","sort","Math","random","map","card","Col","xs","key","Container","Row","noGutters","renderBoard","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s7CAmBeA,MAdf,SAAaC,GACX,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,MAAM,OACrC,kBAACH,EAAA,EAAOI,MAAR,2BACA,kBAACJ,EAAA,EAAOK,SAAR,CAAiBC,UAAU,uBACzB,kBAACN,EAAA,EAAOO,KAAR,CAAaD,UAAU,cAAa,4BAAKP,EAAMS,YAEjD,kBAACR,EAAA,EAAOK,SAAR,CAAiBC,UAAU,uBACzB,kBAACN,EAAA,EAAOO,KAAR,eAAqBR,EAAMU,MAA3B,kBAAiDV,EAAMW,c,gBCIhDC,MAZf,SAAcZ,GACZ,OACI,kBAACa,EAAA,EAAD,CACEC,IAAKd,EAAMe,KACXC,IAAKhB,EAAMiB,MACXC,QAAU,kBAAMlB,EAAMmB,YAAYnB,EAAMoB,KACxCC,WAAS,EACTd,UAAU,c,QC4EHe,G,iNAzEbC,MAAQ,CACNb,MAAO,EACPC,UAAW,EACXa,MAAO,GACPf,SAAU,yBACVgB,S,EAGFC,WAAa,SAAAN,GAEP,EAAKG,MAAMC,MAAMG,SAASP,IACxB,EAAKG,MAAMZ,UAAY,EAAKY,MAAMb,OACpC,EAAKkB,SAAS,CACZjB,UAAW,EAAKY,MAAMb,QAG1B,EAAKkB,SAAS,CACZlB,MAAO,EACPD,SAAU,aACVe,MAAO,MAGT,EAAKI,SAAS,CACZlB,MAAO,EAAKa,MAAMb,MAAQ,EAC1BD,SAAU,iCACVe,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAwBJ,O,6EAKpB,IAAD,OACNS,EAAQ,YAAOC,KAAKP,MAAME,OAIhC,OAFAI,EAASE,MAAK,kBAAMC,KAAKC,SAAW,MAGhCJ,EAASK,KAAI,SAAAC,GACX,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,IAAKH,EAAKf,IACpB,kBAAC,EAAD,CACEA,GAAIe,EAAKf,GACTL,KAAMoB,EAAKpB,KACXE,MAAOkB,EAAKlB,MACZE,YAAa,EAAKO,mB,+BAS9B,OACE,6BACE,kBAAC,EAAD,CACEhB,MAAOoB,KAAKP,MAAMb,MAClBC,UAAWmB,KAAKP,MAAMZ,UACtBF,SAAUqB,KAAKP,MAAMd,WAEvB,kBAAC8B,EAAA,EAAD,CAAWhC,UAAU,QACnB,kBAACiC,EAAA,EAAD,CAAKjC,UAAU,6BACb,kBAAC6B,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACG,EAAA,EAAD,CAAKC,WAAW,GACbX,KAAKY,uB,GAhEJC,cCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ebc3b57f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport './style.css'\r\n\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\r\n      <Navbar.Brand>Witcher Click Game</Navbar.Brand>\r\n      <Navbar.Collapse className=\"justify-content-end\">\r\n        <Navbar.Text className=\"text-light\"><h4>{props.feedback}</h4></Navbar.Text>\r\n      </Navbar.Collapse>\r\n      <Navbar.Collapse className=\"justify-content-end\">\r\n        <Navbar.Text>Score: {props.score} | High Score: {props.highScore}</Navbar.Text>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './style.css';\r\n\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nfunction Card(props) {\r\n  return(\r\n      <Image \r\n        alt={props.name} \r\n        src={props.image} \r\n        onClick={ () => props.handleClick(props.id)}\r\n        thumbnail \r\n        className='gameCard'\r\n      />\r\n  )\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport Nav from './Containers/Navbar';\n// import Instructions from './components/Instructions';\nimport Card from './components/Card';\n\nimport cards from './cards.json';\n\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n    picks: [],\n    feedback: 'Click An Image To Play',\n    cards\n  }\n  \n  pointCheck = id => {\n    \n    if (this.state.picks.includes(id)) {\n      if (this.state.highScore < this.state.score) {\n        this.setState({ \n          highScore: this.state.score\n        })\n      }\n      this.setState({\n        score: 0,\n        feedback: 'Hmm... No.',\n        picks: []\n      })\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        feedback: 'Toss a coin to your Witcher...',\n        picks: [...this.state.picks, id]\n      })\n    }\n  }\n\n  renderBoard() {\n    const cardDeck = [...this.state.cards];\n\n    cardDeck.sort(() => Math.random() - 0.5);\n\n    return (\n        cardDeck.map(card => {\n          return (\n            <Col xs={3} key={card.id}>\n              <Card\n                id={card.id}\n                name={card.name}\n                image={card.image}\n                handleClick={this.pointCheck}\n              />\n            </Col>\n          )\n        })\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n          highScore={this.state.highScore}\n          feedback={this.state.feedback} />\n        {/* <Instructions /> */}\n        <Container className=\"cont\">\n          <Row className=\"justify-content-sm-center\">\n            <Col xs={10}>\n              <Row noGutters={true}>\n                {this.renderBoard()}\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}